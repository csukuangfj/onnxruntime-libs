name: openharmony-shared

on:
  push:
    branches:
      - open-harmony
  workflow_dispatch:
    inputs:
      version:
        description: "Version information (e.g., 1.16.3)"
        required: true

permissions:
  contents: write

# references
# https://github.com/eclipse-oniro4openharmony/oh-app-action/blob/main/action.yml
# https://github.com/openharmony-rs/setup-ohos-sdk

env:
  ONNXRUNTIME_VERSION:
    |- # Enter release tag name or version name in workflow_dispatch. Appropriate version if not specified
    ${{ github.event.release.tag_name || github.event.inputs.version || '1.12.0' }}

jobs:
  open-harmony:
    name: open-harmony shared
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        # arch: [arm64-v8a, armeabi-v7a, x86_64]
        arch: [arm64-v8a]

    steps:
      - name: Setup Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Setup OpenHarmony SDK
        uses: openharmony-rs/setup-ohos-sdk@v0.2
        with:
          version: "4.1"
          cache: true

      - name: Show
        shell: bash
        run: |
          ls -lh
          # /Users/runner
          echo "home: $HOME"

          ls -lh /Users/runner/setup-ohos-sdk/darwin || ls -lh /home/runner/setup-ohos-sdk/linux

          echo "OHOS_BASE_SDK_HOME: $OHOS_BASE_SDK_HOME"
          echo "OHOS_NDK_HOME: $OHOS_NDK_HOME"
          echo "OHOS_SDK_NATIVE: $OHOS_SDK_NATIVE"

          echo "----ndk home---"
          ls -lh $OHOS_NDK_HOME

          echo "----sdk native---"
          ls -lh $OHOS_SDK_NATIVE

          echo "----sdk native/build-tools---"
          ls -lh $OHOS_SDK_NATIVE/build-tools

          echo "----sdk native/build-tools/cmake---"
          ls -lh $OHOS_SDK_NATIVE/build-tools/cmake

          echo "----sdk native/build-tools/cmake/bin---"
          ls -lh $OHOS_SDK_NATIVE/build-tools/cmake/bin

          echo "----sdk native/build---"
          echo "$OHOS_SDK_NATIVE/build"
          ls -lh $OHOS_SDK_NATIVE/build

          echo "----sdk native/build/cmake---"
          echo "$OHOS_SDK_NATIVE/build/cmake"
          ls -lh $OHOS_SDK_NATIVE/build/cmake

          echo "----sdk native/llvm---"
          ls -lh $OHOS_SDK_NATIVE/llvm

          echo "----sdk native/llvm/bin---"
          ls -lh $OHOS_SDK_NATIVE/llvm/bin

      - name: Upload ohos.toolchain.cmake
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.arch }}-ohos.toolchain.cmake
          # path: /Users/runner/setup-ohos-sdk/darwin/native/build/cmake/*.cmake
          path: /home/runner/setup-ohos-sdk/linux/native/build/cmake/*.cmake

      - name: Checkout v${{ env.ONNXRUNTIME_VERSION }}
        # if: steps.cache-build-result.outputs.cache-hit != 'true'
        uses: actions/checkout@v4
        with:
          repository: microsoft/onnxruntime
          submodules: true
          ref: v${{ env.ONNXRUNTIME_VERSION }}
          path: ./onnxruntime

      - name: Set environment variable
        shell: bash
        run: |
          # echo "$OHOS_SDK_NATIVE/build-tools/cmake/bin"  >> "$GITHUB_PATH"
          which cmake

          cmake --version

          ls -lh $OHOS_SDK_NATIVE/build/cmake/ohos.toolchain.cmake

          echo "===="
          cat $OHOS_SDK_NATIVE/build/cmake/ohos.toolchain.cmake
          echo "===="

          # echo "$GITHUB_WORKSPACE/command-line-tools/sdk/default/openharmony/native/llvm/bin"  >> "$GITHUB_PATH"

          ls -lh $OHOS_SDK_NATIVE/llvm/bin/
          echo "--"
          ls -lh $OHOS_SDK_NATIVE/llvm/bin/*unknown*

          cat $GITHUB_PATH

          # /home/runner/work/onnxruntime-libs/onnxruntime-libs/command-line-tools/sdk/default/openharmony/native/llvm/bin/aarch64-unknown-linux-ohos-clang -v || true
          export PATH=$OHOS_SDK_NATIVE/llvm/bin:$PATH
          echo "path: $PATH"

          which aarch64-unknown-linux-ohos-clang++ || true
          which aarch64-unknown-linux-ohos-clang || true

          aarch64-unknown-linux-ohos-clang++ --version || true
          aarch64-unknown-linux-ohos-clang --version || true

          which armv7-unknown-linux-ohos-clang++
          which armv7-unknown-linux-ohos-clang

          armv7-unknown-linux-ohos-clang++ --version
          armv7-unknown-linux-ohos-clang --version

          which x86_64-unknown-linux-ohos-clang++
          which x86_64-unknown-linux-ohos-clang

          x86_64-unknown-linux-ohos-clang++ --version
          x86_64-unknown-linux-ohos-clang --version

      - name: Build onnxruntime ${{ env.ONNXRUNTIME_VERSION }}
        # if: steps.cache-build-result.outputs.cache-hit != 'true'
        shell: bash
        run: |
          cd onnxruntime
          build_dir=./build-shared
          mkdir $build_dir

          version=${{ env.ONNXRUNTIME_VERSION }}
          which python

          ls -lh

          export PATH=$OHOS_SDK_NATIVE/llvm/bin:$PATH
          d=$OHOS_SDK_NATIVE/llvm/bin

          # export PATH=$OHOS_SDK_NATIVE/build-tools/cmake/bin:$PATH

          which cmake
          cmake --version

          arch=${{ matrix.arch }}
          if [[ $arch == "arm64-v8a" ]]; then
            CMAKE_C_COMPILER=aarch64-unknown-linux-ohos-clang
            CMAKE_ASM_COMPILER=$CMAKE_C_COMPILER
            CMAKE_CXX_COMPILER=aarch64-unknown-linux-ohos-clang++
            CMAKE_SYSTEM_PROCESSOR=aarch64
          elif [[ $arch == "armeabi-v7a" ]]; then
            CMAKE_C_COMPILER=armv7-unknown-linux-ohos-clang
            CMAKE_ASM_COMPILER=$CMAKE_C_COMPILER
            CMAKE_CXX_COMPILER=armv7-unknown-linux-ohos-clang++
            CMAKE_SYSTEM_PROCESSOR=armv7
          elif [[ $arch == "x86_64" ]]; then
            CMAKE_C_COMPILER=x86_64-unknown-linux-ohos-clang
            CMAKE_ASM_COMPILER=$CMAKE_C_COMPILER
            CMAKE_CXX_COMPILER=x86_64-unknown-linux-ohos-clang++
            CMAKE_SYSTEM_PROCESSOR=x86_64
          else
            echo "Unknown arch: $arch"
            exit 1
          fi
          ls -lh $d/$CMAKE_C_COMPILER
          ls -lh $d/$CMAKE_ASM_COMPILER
          ls -lh $d/$CMAKE_CXX_COMPILER

          cd $build_dir
          cmake \
            -DCMAKE_SYSTEM_NAME=Linux \
            -DCMAKE_SYSTEM_PROCESSOR=$CMAKE_SYSTEM_PROCESSOR \
            -DABSL_ENABLE_INSTALL=ON \
            -DCMAKE_TOOLCHAIN_FILE=$OHOS_SDK_NATIVE/build/cmake/ohos.toolchain.cmake \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_INSTALL_PREFIX=$build_dir \
            -Donnxruntime_CROSS_COMPILING=ON \
            -D onnxruntime_BUILD_SHARED_LIB=ON \
            -DCMAKE_C_COMPILER=$CMAKE_C_COMPILER \
            -DCMAKE_ASM_COMPILER=$CMAKE_ASM_COMPILER \
            -DCMAKE_CXX_COMPILER=$CMAKE_CXX_COMPILER \
            -DOHOS_ARCH=$arch \
            -DCMAKE_TLS_VERIFY=ON \
            -Donnxruntime_BUILD_UNIT_TESTS=OFF \
            -DFETCHCONTENT_QUIET=OFF \
            -Donnxruntime_ENABLE_MEMLEAK_CHECKER=OFF \
            --compile-no-warning-as-error \
            -Donnxruntime_RUN_ONNX_TESTS=OFF \
            -Donnxruntime_GENERATE_TEST_REPORTS=OFF \
            -Donnxruntime_USE_MIMALLOC=OFF \
            -Donnxruntime_ENABLE_PYTHON=OFF \
            -Donnxruntime_BUILD_CSHARP=OFF \
            -Donnxruntime_BUILD_JAVA=OFF \
            -Donnxruntime_BUILD_NODEJS=OFF \
            -Donnxruntime_BUILD_OBJC=OFF \
            -Donnxruntime_BUILD_APPLE_FRAMEWORK=OFF \
            -Donnxruntime_USE_DNNL=OFF \
            -Donnxruntime_USE_NNAPI_BUILTIN=OFF \
            -Donnxruntime_USE_RKNPU=OFF \
            -Donnxruntime_USE_LLVM=OFF \
            -Donnxruntime_ENABLE_MICROSOFT_INTERNAL=OFF \
            -Donnxruntime_USE_VITISAI=OFF \
            -Donnxruntime_USE_TENSORRT=OFF \
            -Donnxruntime_USE_TENSORRT_BUILTIN_PARSER=ON \
            -Donnxruntime_USE_TVM=OFF \
            -Donnxruntime_TVM_CUDA_RUNTIME=OFF \
            -Donnxruntime_TVM_USE_HASH=OFF \
            -Donnxruntime_USE_MIGRAPHX=OFF \
            -Donnxruntime_DISABLE_CONTRIB_OPS=OFF \
            -Donnxruntime_DISABLE_ML_OPS=OFF \
            -Donnxruntime_DISABLE_RTTI=OFF \
            -Donnxruntime_DISABLE_EXCEPTIONS=OFF \
            -Donnxruntime_MINIMAL_BUILD=OFF \
            -Donnxruntime_EXTENDED_MINIMAL_BUILD=OFF \
            -Donnxruntime_MINIMAL_BUILD_CUSTOM_OPS=OFF \
            -Donnxruntime_REDUCED_OPS_BUILD=OFF \
            -Donnxruntime_ENABLE_LANGUAGE_INTEROP_OPS=OFF \
            -Donnxruntime_USE_DML=OFF \
            -Donnxruntime_USE_WINML=OFF \
            -Donnxruntime_BUILD_MS_EXPERIMENTAL_OPS=OFF \
            -Donnxruntime_USE_TELEMETRY=OFF \
            -Donnxruntime_ENABLE_LTO=OFF \
            -Donnxruntime_USE_ACL=OFF \
            -Donnxruntime_USE_ACL_1902=OFF \
            -Donnxruntime_USE_ACL_1905=OFF \
            -Donnxruntime_USE_ACL_1908=OFF \
            -Donnxruntime_USE_ACL_2002=OFF \
            -Donnxruntime_USE_ARMNN=OFF \
            -Donnxruntime_ARMNN_RELU_USE_CPU=ON \
            -Donnxruntime_ARMNN_BN_USE_CPU=ON \
            -Donnxruntime_USE_JSEP=OFF \
            -Donnxruntime_ENABLE_NVTX_PROFILE=OFF \
            -Donnxruntime_ENABLE_TRAINING=OFF \
            -Donnxruntime_ENABLE_TRAINING_OPS=OFF \
            -Donnxruntime_ENABLE_TRAINING_APIS=OFF \
            -Donnxruntime_ENABLE_CPU_FP16_OPS=OFF \
            -Donnxruntime_USE_NCCL=OFF \
            -Donnxruntime_BUILD_BENCHMARKS=OFF \
            -Donnxruntime_USE_ROCM=OFF \
            -DOnnxruntime_GCOV_COVERAGE=OFF \
            -Donnxruntime_USE_MPI=OFF \
            -Donnxruntime_ENABLE_MEMORY_PROFILE=OFF \
            -Donnxruntime_ENABLE_CUDA_LINE_NUMBER_INFO=OFF \
            -Donnxruntime_BUILD_WEBASSEMBLY_STATIC_LIB=OFF \
            -Donnxruntime_ENABLE_WEBASSEMBLY_EXCEPTION_CATCHING=ON \
            -Donnxruntime_ENABLE_WEBASSEMBLY_API_EXCEPTION_CATCHING=OFF \
            -Donnxruntime_ENABLE_WEBASSEMBLY_EXCEPTION_THROWING=ON \
            -Donnxruntime_WEBASSEMBLY_RUN_TESTS_IN_BROWSER=OFF \
            -Donnxruntime_ENABLE_WEBASSEMBLY_THREADS=OFF \
            -Donnxruntime_ENABLE_WEBASSEMBLY_DEBUG_INFO=OFF \
            -Donnxruntime_ENABLE_WEBASSEMBLY_PROFILING=OFF \
            -Donnxruntime_ENABLE_LAZY_TENSOR=OFF \
            -Donnxruntime_ENABLE_EXTERNAL_CUSTOM_OP_SCHEMAS=OFF \
            -Donnxruntime_ENABLE_CUDA_PROFILING=OFF \
            -Donnxruntime_ENABLE_ROCM_PROFILING=OFF \
            -Donnxruntime_USE_XNNPACK=OFF \
            -Donnxruntime_USE_WEBNN=OFF \
            -Donnxruntime_USE_CANN=OFF \
            -Donnxruntime_USE_TRITON_KERNEL=OFF \
            -Donnxruntime_DISABLE_FLOAT8_TYPES=OFF \
            ../cmake

            make -j2
