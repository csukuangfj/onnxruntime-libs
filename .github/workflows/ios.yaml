name: ios

on:
  push:
    branches:
      - master
      - ios
    paths:
      - '.github/workflows/ios.yaml'

  pull_request:
    branches:
      - master
    paths:
      - '.github/workflows/ios.yaml'

  workflow_dispatch:
    inputs:
      version:
        description: "Version information（e.g., 1.15.1）"
        required: true

permissions:
  contents: write

env:
  ONNXRUNTIME_VERSION:
    |- # Enter release tag name or version name in workflow_dispatch. Appropriate version if not specified
    ${{ github.event.release.tag_name || github.event.inputs.version || '1.15.1' }}

jobs:
  ios_arm64:
    name: Build onnxruntime lib for iOS arm64 on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest]

    steps:
      - name: Checkout v${{ env.ONNXRUNTIME_VERSION }}
        uses: actions/checkout@v2
        with:
          repository: microsoft/onnxruntime
          submodules: true
          ref: v${{ env.ONNXRUNTIME_VERSION }}

      - name: Install dependencies on macos
        run: |
          # Workaround for protoc https://github.com/microsoft/onnxruntime/issues/16238#issuecomment-1590398821
          brew install protobuf@21
          python3 -m pip install cmake
          cmake --version

          brew install tree
          tree --version

      - name: Build onnxruntime ${{ env.ONNXRUNTIME_VERSION }} for arm64
        shell: bash
        run: |
          build_dir=./build-ios/arm64

          python3 ./tools/ci_build/build.py \
            --build_dir $build_dir \
            --config Release \
            --update \
            --build \
            --use_xcode \
            --cmake_extra_defines onnxruntime_BUILD_UNIT_TESTS=OFF \
            --cmake_extra_defines onnxruntime_BUILD_SHARED_LIB=OFF \
            --cmake_extra_defines CMAKE_INSTALL_PREFIX=$build_dir/install/ \
            --ios \
            --ios_sysroot iphoneos \
            --osx_arch arm64 \
            --target install \
            --parallel \
            --skip_tests \
            --build_apple_framework \
            --apple_deploy_target 13.0 \
            --use_coreml \
            --path_to_protoc_exe /usr/local/opt/protobuf@21/bin/protoc

      - name: Copy results
        shell: bash
        run: |
          version=${{ env.ONNXRUNTIME_VERSION }}
          arch=arm64

          libtool -static -o build-ios/$arch/onnxruntime.a \
            build-ios/$arch/Release/static_libraries/libabsl_base.a \
            build-ios/$arch/Release/static_libraries/libabsl_city.a \
            build-ios/$arch/Release/static_libraries/libabsl_hash.a \
            build-ios/$arch/Release/static_libraries/libabsl_low_level_hash.a \
            build-ios/$arch/Release/static_libraries/libabsl_raw_hash_set.a \
            build-ios/$arch/Release/static_libraries/libabsl_raw_logging_internal.a \
            build-ios/$arch/Release/static_libraries/libabsl_throw_delegate.a \
            build-ios/$arch/Release/static_libraries/libclog.a \
            build-ios/$arch/Release/static_libraries/libcpuinfo.a \
            build-ios/$arch/Release/static_libraries/libflatbuffers.a \
            build-ios/$arch/Release/static_libraries/libnsync_cpp.a \
            build-ios/$arch/Release/static_libraries/libonnx.a \
            build-ios/$arch/Release/static_libraries/libonnx_proto.a \
            build-ios/$arch/Release/static_libraries/libonnxruntime_common.a \
            build-ios/$arch/Release/static_libraries/libonnxruntime_coreml_proto.a \
            build-ios/$arch/Release/static_libraries/libonnxruntime_flatbuffers.a \
            build-ios/$arch/Release/static_libraries/libonnxruntime_framework.a \
            build-ios/$arch/Release/static_libraries/libonnxruntime_graph.a \
            build-ios/$arch/Release/static_libraries/libonnxruntime_mlas.a \
            build-ios/$arch/Release/static_libraries/libonnxruntime_optimizer.a \
            build-ios/$arch/Release/static_libraries/libonnxruntime_providers.a \
            build-ios/$arch/Release/static_libraries/libonnxruntime_providers_coreml.a \
            build-ios/$arch/Release/static_libraries/libonnxruntime_session.a \
            build-ios/$arch/Release/static_libraries/libonnxruntime_util.a \
            build-ios/$arch/Release/static_libraries/libprotobuf-lite.a \
            build-ios/$arch/Release/static_libraries/libre2.a

          dst=onnxruntime-ios-$arch-${{ env.ONNXRUNTIME_VERSION }}
          cp build-ios/$arch/onnxruntime.a $dst
          ls -lh $dst

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: onnxruntime-ios-arm64-${{ env.ONNXRUNTIME_VERSION }}
          path: onnxruntime-ios-arm64-${{ env.ONNXRUNTIME_VERSION }}

  ios_simulator:
    name: Build onnxruntime lib for iOS simulator on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest]
        arch: [arm64, x86_64]

    steps:
      - name: Checkout v${{ env.ONNXRUNTIME_VERSION }}
        uses: actions/checkout@v2
        with:
          repository: microsoft/onnxruntime
          submodules: true
          ref: v${{ env.ONNXRUNTIME_VERSION }}

      - name: Install dependencies on macos
        run: |
          # Workaround for protoc https://github.com/microsoft/onnxruntime/issues/16238#issuecomment-1590398821
          brew install protobuf@21
          python3 -m pip install cmake
          cmake --version

          brew install tree
          tree --version

      - name: Build onnxruntime ${{ env.ONNXRUNTIME_VERSION }} for simulator ${{ matrix.arch }}
        shell: bash
        run: |
          build_dir=./build-ios/simulator/${{ matrix.arch }}

          python3 ./tools/ci_build/build.py \
            --build_dir $build_dir \
            --config Release \
            --update \
            --build \
            --use_xcode \
            --cmake_extra_defines onnxruntime_BUILD_UNIT_TESTS=OFF \
            --cmake_extra_defines onnxruntime_BUILD_SHARED_LIB=OFF \
            --cmake_extra_defines CMAKE_INSTALL_PREFIX=$build_dir/install/ \
            --ios \
            --ios_sysroot iphonesimulator \
            --osx_arch ${{ matrix.arch }} \
            --target install \
            --parallel \
            --skip_tests \
            --build_apple_framework \
            --apple_deploy_target 13.0 \
            --use_coreml \
            --path_to_protoc_exe /usr/local/opt/protobuf@21/bin/protoc

      - name: Copy results
        shell: bash
        run: |
          version=${{ env.ONNXRUNTIME_VERSION }}
          arch=simulator/${{ matrix.arch }}

          libtool -static -o build-ios/$arch/onnxruntime.a \
            build-ios/$arch/Release/static_libraries/libabsl_base.a \
            build-ios/$arch/Release/static_libraries/libabsl_city.a \
            build-ios/$arch/Release/static_libraries/libabsl_hash.a \
            build-ios/$arch/Release/static_libraries/libabsl_low_level_hash.a \
            build-ios/$arch/Release/static_libraries/libabsl_raw_hash_set.a \
            build-ios/$arch/Release/static_libraries/libabsl_raw_logging_internal.a \
            build-ios/$arch/Release/static_libraries/libabsl_throw_delegate.a \
            build-ios/$arch/Release/static_libraries/libclog.a \
            build-ios/$arch/Release/static_libraries/libcpuinfo.a \
            build-ios/$arch/Release/static_libraries/libflatbuffers.a \
            build-ios/$arch/Release/static_libraries/libnsync_cpp.a \
            build-ios/$arch/Release/static_libraries/libonnx.a \
            build-ios/$arch/Release/static_libraries/libonnx_proto.a \
            build-ios/$arch/Release/static_libraries/libonnxruntime_common.a \
            build-ios/$arch/Release/static_libraries/libonnxruntime_coreml_proto.a \
            build-ios/$arch/Release/static_libraries/libonnxruntime_flatbuffers.a \
            build-ios/$arch/Release/static_libraries/libonnxruntime_framework.a \
            build-ios/$arch/Release/static_libraries/libonnxruntime_graph.a \
            build-ios/$arch/Release/static_libraries/libonnxruntime_mlas.a \
            build-ios/$arch/Release/static_libraries/libonnxruntime_optimizer.a \
            build-ios/$arch/Release/static_libraries/libonnxruntime_providers.a \
            build-ios/$arch/Release/static_libraries/libonnxruntime_providers_coreml.a \
            build-ios/$arch/Release/static_libraries/libonnxruntime_session.a \
            build-ios/$arch/Release/static_libraries/libonnxruntime_util.a \
            build-ios/$arch/Release/static_libraries/libprotobuf-lite.a \
            build-ios/$arch/Release/static_libraries/libre2.a

          dst=onnxruntime-ios-simulator-${{ matrix.arch }}-${{ env.ONNXRUNTIME_VERSION }}
          cp build-ios/$arch/onnxruntime.a $dst

          if [[ ${{ matrix.arch }} == "arm64" ]]; then
            # cp -v ./build-ios/simulator/arm64/install/bin/onnxruntime.framework/Headers/*.h $dst
            cp -v ./build-ios/simulator/arm64/Release/Release-iphonesimulator/onnxruntime.framework/Headers $dst
          fi

          ls -lh $dst

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: onnxruntime-ios-simulator-${{ matrix.arch }}-${{ env.ONNXRUNTIME_VERSION }}
          path: onnxruntime-ios-simulator-${{ matrix.arch }}-${{ env.ONNXRUNTIME_VERSION }}

  create_xcframework:
    name: Create xcframework
    runs-on: macos-latest
    needs: [ios_arm64, ios_simulator]
    steps:
      - name: Retrieve artifact for ios_arm64
        uses: actions/download-artifact@v2
        with:
          name: onnxruntime-ios-arm64-${{ env.ONNXRUNTIME_VERSION }}
          path: ./

      - name: Retrieve artifact for simulator arm64
        uses: actions/download-artifact@v2
        with:
          name: onnxruntime-ios-simulator-arm64-${{ env.ONNXRUNTIME_VERSION }}
          path: ./

      - name: Retrieve artifact for simulator x86_64
        uses: actions/download-artifact@v2
        with:
          name: onnxruntime-ios-simulator-x86_64-${{ env.ONNXRUNTIME_VERSION }}
          path: ./

      - name: Install utilities
        shell: bash
        run: |
          brew install tree

      - name: Display artifact
        shell: bash
        run: |
          ls -lh
          ls -lh */*
          tree -L 2 .

      - name: Create xcframework
        shell: bash
        run: |
          mkdir ./simulator
          lipo -create onnxruntime-ios-simulator-x86_64-${{ env.ONNXRUNTIME_VERSION }}/onnxruntime.a \
                       onnxruntime-ios-simulator-arm64-${{ env.ONNXRUNTIME_VERSION }}/onnxruntime.a \
               -output ./simulator/onnxruntime.a

          file ./simulator/onnxruntime.a
          ls -lh ./simulator/onnxruntime.a

          xcodebuild -create-xcframework \
              -library onnxruntime-ios-arm64-${{ env.ONNXRUNTIME_VERSION }}/onnxruntime.a \
              -library ./simulator/onnxruntime.a \
              -output onnxruntime.xcframework

          mkdir -p onnxruntime.xcframework/Headers

          cp -v onnxruntime-ios-simulator-arm64-${{ env.ONNXRUNTIME_VERSION }}/*.h onnxruntime.xcframework/Headers

          tree onnxruntime.xcframework

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: onnxruntime.xcframework-${{ env.ONNXRUNTIME_VERSION }}
          path: onnxruntime.xcframework
