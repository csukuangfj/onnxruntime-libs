name: macos-static

on:
  push:
    branches:
      - master
      - macos-static
    paths:
      - '.github/workflows/macos-static.yaml'

  pull_request:
    branches:
      - master
    paths:
      - '.github/workflows/macos-static.yaml'

  workflow_dispatch:
    inputs:
      version:
        description: "Version information（e.g., 1.15.1）"
        required: true

permissions:
  contents: write

env:
  ONNXRUNTIME_VERSION:
    |- # Enter release tag name or version name in workflow_dispatch. Appropriate version if not specified
    ${{ github.event.release.tag_name || github.event.inputs.version || '1.15.1' }}

jobs:
  macos_intel:
    name: Build onnxruntime lib for macOS ${{ matrix.arch }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest]
        arch: [x86_64, arm64]

    steps:
      - name: Cache build result for ${{ env.ONNXRUNTIME_VERSION }}
        id: cache-build-result
        uses: actions/cache@v2
        with:
          path: onnxruntime-macos-static-${{ matrix.arch }}-${{ env.ONNXRUNTIME_VERSION }}
          key: onnxruntime-macos-static-${{ matrix.arch }}-${{ env.ONNXRUNTIME_VERSION }}-cache-v1

      - name: Checkout v${{ env.ONNXRUNTIME_VERSION }}
        if: steps.cache-build-result.outputs.cache-hit != 'true'
        uses: actions/checkout@v2
        with:
          repository: microsoft/onnxruntime
          submodules: true
          ref: v${{ env.ONNXRUNTIME_VERSION }}

      - name: Install dependencies on macos
        if: steps.cache-build-result.outputs.cache-hit != 'true'
        shell: bash
        run: |
          python3 -m pip install cmake
          cmake --version
          brew install tree
          tree --version

      - name: Download protoc
        if: steps.cache-build-result.outputs.cache-hit != 'true'
        shell: bash
        run: |
          # see ./cmake/deps.txt
          if [[ ${{ env.ONNXRUNTIME_VERSION }} =~ 1.14.[0-9] ]]; then
            wget https://github.com/protocolbuffers/protobuf/releases/download/v3.20.3/protoc-3.20.3-osx-x86_64.zip
            unzip protoc-3.20.3-osx-x86_64.zip
          elif [[ ${{ env.ONNXRUNTIME_VERSION }} =~ 1.15.[0-9] ]]; then
            wget https://github.com/protocolbuffers/protobuf/releases/download/v21.12/protoc-21.12-osx-x86_64.zip
            unzip protoc-21.12-osx-x86_64.zip
          fi

          ./bin/protoc --version

      - name: Set environment variable
        if: steps.cache-build-result.outputs.cache-hit != 'true'
        shell: bash
        run: |
          echo "$GITHUB_WORKSPACE/bin"  >> "$GITHUB_PATH"

      - name: Display protoc info for ${{ env.ONNXRUNTIME_VERSION }}
        if: steps.cache-build-result.outputs.cache-hit != 'true'
        shell: bash
        run: |
          protoc --version

      - name: Build onnxruntime ${{ env.ONNXRUNTIME_VERSION }} for ${{ matrix.arch }}
        if: steps.cache-build-result.outputs.cache-hit != 'true'
        shell: bash
        run: |
          arch=${{ matrix.arch }}
          build_dir=./build-macos/$arch

          python3 ./tools/ci_build/build.py \
            --build_dir $build_dir \
            --config Release \
            --update \
            --build \
            --use_xcode \
            --compile_no_warning_as_error \
            --cmake_extra_defines onnxruntime_BUILD_UNIT_TESTS=OFF \
            --cmake_extra_defines onnxruntime_BUILD_SHARED_LIB=OFF \
            --cmake_extra_defines CMAKE_INSTALL_PREFIX=$build_dir/install/ \
            --osx_arch $arch \
            --target install \
            --parallel \
            --skip_tests \
            --build_apple_framework \
            --apple_deploy_target 13.0 \
            --use_coreml \
            --path_to_protoc_exe $GITHUB_WORKSPACE/bin/protoc

      - name: Copy results
        if: steps.cache-build-result.outputs.cache-hit != 'true'
        shell: bash
        run: |
          version=${{ env.ONNXRUNTIME_VERSION }}
          arch=${{ matrix.arch }}

          ls -1 build-macos/$arch/Release/static_libraries

          libtool -static -o build-macos/$arch/onnxruntime.a \
            build-macos/$arch/Release/static_libraries/libabsl_base.a \
            build-macos/$arch/Release/static_libraries/libabsl_city.a \
            build-macos/$arch/Release/static_libraries/libabsl_hash.a \
            build-macos/$arch/Release/static_libraries/libabsl_low_level_hash.a \
            build-macos/$arch/Release/static_libraries/libabsl_raw_hash_set.a \
            build-macos/$arch/Release/static_libraries/libabsl_raw_logging_internal.a \
            build-macos/$arch/Release/static_libraries/libabsl_throw_delegate.a \
            build-macos/$arch/Release/static_libraries/libclog.a \
            build-macos/$arch/Release/static_libraries/libcpuinfo.a \
            build-macos/$arch/Release/static_libraries/libflatbuffers.a \
            build-macos/$arch/Release/static_libraries/libnsync_cpp.a \
            build-macos/$arch/Release/static_libraries/libonnx.a \
            build-macos/$arch/Release/static_libraries/libonnx_proto.a \
            build-macos/$arch/Release/static_libraries/libonnxruntime_common.a \
            build-macos/$arch/Release/static_libraries/libonnxruntime_coreml_proto.a \
            build-macos/$arch/Release/static_libraries/libonnxruntime_flatbuffers.a \
            build-macos/$arch/Release/static_libraries/libonnxruntime_framework.a \
            build-macos/$arch/Release/static_libraries/libonnxruntime_graph.a \
            build-macos/$arch/Release/static_libraries/libonnxruntime_mlas.a \
            build-macos/$arch/Release/static_libraries/libonnxruntime_optimizer.a \
            build-macos/$arch/Release/static_libraries/libonnxruntime_providers.a \
            build-macos/$arch/Release/static_libraries/libonnxruntime_providers_coreml.a \
            build-macos/$arch/Release/static_libraries/libonnxruntime_session.a \
            build-macos/$arch/Release/static_libraries/libonnxruntime_util.a \
            build-macos/$arch/Release/static_libraries/libprotobuf-lite.a \
            build-macos/$arch/Release/static_libraries/libre2.a

          dst=onnxruntime-macos-static-$arch-${{ env.ONNXRUNTIME_VERSION }}

          mkdir -p $dst

          cp -v build-macos/$arch/onnxruntime.a $dst

          cp -v build-macos/$arch/Release/build-macos/$arch/install/bin/onnxruntime.framework/Headers/* $dst/

          ls -lh $dst

      - name: Upload artifact
        if: steps.cache-build-result.outputs.cache-hit != 'true'
        uses: actions/upload-artifact@v2
        with:
          name: onnxruntime-macos-static-${{ matrix.arch }}-${{ env.ONNXRUNTIME_VERSION }}
          path: onnxruntime-macos-static-${{ matrix.arch }}-${{ env.ONNXRUNTIME_VERSION }}

      - name: Copy libs
        if: steps.cache-build-result.outputs.cache-hit != 'true'
        shell: bash
        run: |
          version=${{ env.ONNXRUNTIME_VERSION }}
          arch=${{ matrix.arch }}

          ls -1 build-macos/$arch/Release/static_libraries

          dst=static-libraries-$arch-$version
          mkdir -p $dst
          cp  build-macos/$arch/Release/static_libraries/*.a $dst

          ls -lh $dst

      - name: Upload libs
        if: steps.cache-build-result.outputs.cache-hit != 'true'
        uses: actions/upload-artifact@v2
        with:
          name: onnxruntime-macos-static-${{ matrix.arch }}-${{ env.ONNXRUNTIME_VERSION }}-all-libs
          path: static-libraries-${{ matrix.arch }}-${{ env.ONNXRUNTIME_VERSION }}
