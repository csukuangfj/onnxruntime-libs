name: windows x86 shared

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Version information (e.g., 1.19.0)"
        required: true

permissions:
  contents: write

env:
  ONNXRUNTIME_VERSION:
    |- # Enter release tag name or version name in workflow_dispatch. Appropriate version if not specified
    ${{ github.event.release.tag_name || github.event.inputs.version || '1.19.0' }}

jobs:
  windows_x86_shared:
    if: false
    name: Shared lib for windows x86
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest]
        python-version: ["3.8"]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache build result for ${{ env.ONNXRUNTIME_VERSION }}
        id: cache-build-result
        uses: actions/cache@v2
        with:
          path: onnxruntime-win-x86-${{ env.ONNXRUNTIME_VERSION }}
          key: onnxruntime-win-x86-${{ env.ONNXRUNTIME_VERSION }}-cache-v2

      - name: Checkout
        if: steps.cache-build-result.outputs.cache-hit != 'true'
        uses: actions/checkout@v2
        with:
          repository: microsoft/onnxruntime
          submodules: true
          ref: v${{ env.ONNXRUNTIME_VERSION }}

      - name: Install dependencies on Windows
        if: steps.cache-build-result.outputs.cache-hit != 'true'
        shell: bash
        run: |
          python3 -m pip install cmake
          cmake --version
          cmake --help

#   Visual Studio 17 2022        = Generates Visual Studio 2022 project files.
#                                  Use -A option to specify architecture.
# * Visual Studio 16 2019        = Generates Visual Studio 2019 project files.
#                                  Use -A option to specify architecture.
#   Visual Studio 15 2017 [arch] = Generates Visual Studio 2017 project files.
#                                  Optional [arch] can be "Win64" or "ARM".
#   Visual Studio 14 2015 [arch] = Generates Visual Studio 2015 project files.
#                                  Optional [arch] can be "Win64" or "ARM".
#   Visual Studio 12 2013 [arch] = Deprecated.  Generates Visual Studio 2013
#                                  project files.  Optional [arch] can be
#                                  "Win64" or "ARM".
#   Visual Studio 9 2008 [arch]  = Deprecated.  Generates Visual Studio 2008
#                                  project files.  Optional [arch] can be
#                                  "Win64" or "IA64".

      - name: Build onnxruntime for windows x86
        if: steps.cache-build-result.outputs.cache-hit != 'true'
        shell: bash
        run: |
          build_dir=./build-windows-x86

          python3 ./tools/ci_build/build.py \
            --compile_no_warning_as_error \
            --build_dir $build_dir \
            --config Release \
            --build \
            --build_shared_lib \
            --x86 \
            --update \
            --cmake_generator "Visual Studio 17 2022" \
            --cmake_extra_defines onnxruntime_BUILD_UNIT_TESTS=OFF \
            --cmake_extra_defines CMAKE_INSTALL_PREFIX=$build_dir/install/ \
            --target install \
            --parallel \
            --skip_tests

            # --msvc_toolset "14.11" \

      - name: Display build results
        if: steps.cache-build-result.outputs.cache-hit != 'true'
        shell: bash
        run: |
          build_dir=./build-windows-x86
          ls -lh $build_dir/Release/$build_dir/install
          echo "----"
          ls -lh $build_dir/Release/$build_dir/install/bin
          echo "----"
          ls -lh $build_dir/Release/$build_dir/install/lib
          echo "----"
          ls -lh $build_dir/Release/$build_dir/install/include
          echo "----"
          ls -lh $build_dir/Release/$build_dir/install/include/onnxruntime

      - name: Collect results
        if: steps.cache-build-result.outputs.cache-hit != 'true'
        shell: bash
        run: |
          build_dir=./build-windows-x86
          version=${{ env.ONNXRUNTIME_VERSION }}

          dst=onnxruntime-win-x86-${version}

          mkdir -p $dst/include
          mkdir -p $dst/lib

          cp -v $build_dir/Release/$build_dir/install/include/onnxruntime/*.h $dst/include
          cp -v $build_dir/Release/$build_dir/install/lib/*.lib $dst/lib
          cp -v $build_dir/Release/$build_dir/install/bin/*.dll $dst/lib

          tar cjvf $dst.tar.bz2 $dst

      - name: Upload v${{ env.ONNXRUNTIME_VERSION }}
        if: steps.cache-build-result.outputs.cache-hit != 'true'
        uses: svenstaro/upload-release-action@v2
        with:
          file_glob: true
          file: "./*.tar.bz2"
          overwrite: true
          tag: v${{ env.ONNXRUNTIME_VERSION }}


      # https://huggingface.co/docs/hub/spaces-github-actions
      - name: Publish to huggingface
        if: github.repository_owner == 'csukuangfj' && steps.cache-build-result.outputs.cache-hit != 'true'
        env:
          HF_TOKEN: ${{ secrets.HF_TOKEN }}
        shell: bash
        run: |
          ls -lh
          version=${{ env.ONNXRUNTIME_VERSION }}

          dst=onnxruntime-win-x86-${version}

          git config --global user.email "csukuangfj@gmail.com"
          git config --global user.name "Fangjun Kuang"

          export GIT_CLONE_PROTECTION_ACTIVE=false
          GIT_LFS_SKIP_SMUDGE=1 git clone https://huggingface.co/csukuangfj/onnxruntime-libs huggingface

          cd huggingface
          cp -v ../$dst.tar.bz2 ./
          git status
          git lfs track "*.tar.bz2"

          git add .

          git commit -m "upload $dst.tar.bz2"
          git push https://csukuangfj:$HF_TOKEN@huggingface.co/csukuangfj/onnxruntime-libs main

      - name: Upload artifact
        if: steps.cache-build-result.outputs.cache-hit != 'true'
        uses: actions/upload-artifact@v4
        with:
          name: onnxruntime-win-x86-${{ env.ONNXRUNTIME_VERSION }}
          path: onnxruntime-win-x86-${{ env.ONNXRUNTIME_VERSION }}
